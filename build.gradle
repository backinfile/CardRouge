import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}


sourceCompatibility = '17'
targetCompatibility = '17'

group = 'com.backinfile'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url "https://nexus.gluonhq.com/nexus/content/repositories/releases/" }
    maven { url 'https://jitpack.io' }
}

dependencies {

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    implementation 'com.github.almasb:fxgl:17.3'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.10'
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.4")

//    implementation 'com.github.backinfile:support:v1.1.4'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.4'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.4'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.0'

    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.83'
    implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.31'
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
}

//kotlin {
//    jvmToolchain(11)
//}

application {
    mainModule = 'com.backinfile.cardRouge'
    mainClass = 'com.backinfile.cardRouge.AppKt'
    sourceSets {
        main {
            resources {
                srcDirs = ["src/main/resources"]
            }
        }
    }
}


javafx {
    version = "18"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media']
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions.jvmTarget = '17'
}


jlink {
    imageZip.set(project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip"))
    options.set { ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'] }
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

//task run(dependsOn: [build], type: JavaExec) {
//    main = project.mainClassName
//    classpath = sourceSets.main.runtimeClasspath
//    workingDir = new File('.') // ./src/main/resources
//    standardInput = System.in
//}

ext {
    mainClassName = 'com.backinfile.cardRouge.AppKt'
    exportPath = 'export'
}
tasks.register('dist', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = project.name + ".jar"
    manifest.attributes 'Main-Class': project.mainClassName
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

tasks.register('copyMyJson', Copy) {
    from 'json'
    into project.exportPath + '/json'
}
tasks.register('copyMyJar', Copy) {
    dependsOn dist
    from dist.archiveFile.get().asFile
    into project.exportPath
}
tasks.register('distDesktop') {
    dependsOn copyMyJson, copyMyJar
    doLast {
        String path = project.exportPath;
        String content = "start .\\jdk-17\\bin\\javaw.exe -jar " + project.name + ".jar"
        def filePath = Paths.get(projectDir.getPath(), path, "run.bat")
        if (Files.exists(filePath)) Files.delete(filePath)
        Files.writeString(filePath, content, StandardCharsets.UTF_8, StandardOpenOption.CREATE);
    }
}

//jpackage {
//    nativeImageType = "exe"
//    mainClass = "com.example.Main"
//    input = shadowJar.archiveFile.get().asFile
//    outputDir = file("build/jpackage")
//    packageName = "MyApp"
//    appVersion = "1.0.0"
//}
